# Device Registry Integration Processor for Benthos
# This processor performs hostname â†’ ship_id lookups using the Device Registry service
# Add this to your Benthos pipeline before other processing steps

- mapping: |
    # Enhanced ship_id resolution using Device Registry service
    root.original_ship_id = this.ship_id
    root.original_host = this.host
    root.registry_lookup_attempted = false
    root.registry_lookup_success = false
    
    # First check if we already have a valid ship_id
    if this.ship_id != null && this.ship_id != "" && !this.ship_id.contains("unknown") {
      # Valid ship_id already exists, keep it
      root.ship_id = this.ship_id
      root.ship_id_source = "original_field"
    } else {
      # Need to resolve ship_id via registry lookup
      root.registry_lookup_attempted = true
      
      # Try hostname-based lookup via Device Registry
      let hostname = if this.host != null && this.host != "" { 
        this.host 
      } else if this.labels != null && this.labels.instance != null { 
        this.labels.instance 
      } else if this.hostname != null && this.hostname != "" {
        this.hostname
      } else {
        null
      }
      
      if hostname != null {
        # CRITICAL FIX: Re-enable Device Registry HTTP lookup with proper error handling
        root.registry_lookup_attempted = true
        
        # Attempt HTTP lookup to Device Registry service
        let registry_url = "http://device-registry:8080/lookup/" + hostname
        let registry_response = null
        
        # Try registry lookup with error handling
        let lookup_result = http_request("GET", registry_url).catch(error -> {
          # Registry lookup failed, use fallback logic
          null
        })
        
        if lookup_result != null && lookup_result.status_code == 200 {
          # Parse successful registry response
          let registry_data = lookup_result.body.parse_json().catch(error -> null)
          if registry_data != null && registry_data.mapping != null && registry_data.mapping.ship_id != null {
            root.ship_id = registry_data.mapping.ship_id
            root.ship_id_source = "registry_lookup"
            root.registry_lookup_success = true
            root.device_id = registry_data.mapping.device_id
            root.device_type = registry_data.mapping.device_type
            root.ship_name = registry_data.mapping.ship_name
          } else {
            # Registry response invalid, use fallback
            root.ship_id = if hostname.contains("-") {
              hostname.split("-").index(0) + "-ship"
            } else {
              hostname + "-ship"
            }
            root.ship_id_source = "registry_failed_hostname_fallback"
          }
        } else {
          # Registry lookup failed or returned 404, use hostname-based fallback
          root.ship_id = if hostname.contains("-") {
            hostname.split("-").index(0) + "-ship"
          } else {
            hostname + "-ship"
          }
          root.ship_id_source = "registry_unavailable_hostname_fallback"
        }
      } else {
        # No hostname available, use ultimate fallback
        root.ship_id = "unknown-ship"
        root.ship_id_source = "no_hostname"
      }
    }
    
    # Add registry lookup metadata for debugging
    root.registry_metadata = {
      "lookup_attempted": root.registry_lookup_attempted,
      "lookup_success": root.registry_lookup_success,
      "ship_id_source": root.ship_id_source,
      "original_host": root.original_host,
      "resolved_ship_id": root.ship_id,
      "timestamp": now()
    }

# Registry update processor to update last_seen timestamp
- mapping: |
    # CRITICAL FIX: Re-enable registry last_seen updates with proper error handling
    root.registry_update_success = false
    root.registry_update_note = "attempting_update"
    
    # Only update if we have a valid hostname and successful registry lookup
    if this.host != null && this.host != "" && this.host != "unknown" && this.registry_lookup_success == true {
      let update_url = "http://device-registry:8080/lookup/" + this.host + "/update-last-seen"
      
      # Attempt to update last_seen timestamp
      let update_result = http_request("POST", update_url).catch(error -> {
        # Update failed, log but don't block processing
        null
      })
      
      if update_result != null && update_result.status_code == 200 {
        root.registry_update_success = true
        root.registry_update_note = "last_seen_updated"
      } else {
        root.registry_update_success = false
        root.registry_update_note = "update_failed_or_not_found"
      }
    } else {
      root.registry_update_note = "no_valid_hostname_or_lookup_failed"
    }

# Device type enrichment processor  
- mapping: |
    # Enhance device_type classification if not already set by registry
    if root.device_type == null || root.device_type == "" {
      root.device_type = if this.service != null {
        if this.service.contains("nginx") || this.service.contains("web") {
          "server"
        } else if this.service.contains("postgres") || this.service.contains("mysql") {
          "server" 
        } else if this.service.contains("network") || this.service.contains("snmp") {
          "network"
        } else {
          "server"
        }
      } else if this.metric_name != null {
        if this.metric_name.contains("cpu") || this.metric_name.contains("memory") {
          "server"
        } else if this.metric_name.contains("network") || this.metric_name.contains("interface") {
          "network"
        } else {
          "unknown"
        }
      } else {
        "unknown"
      }
    }
    
    # Ensure metric_name is safe for cache operations
    root.metric_name = if this.metric_name != null && this.metric_name != "" { 
      this.metric_name 
    } else { 
      "unknown_metric" 
    }
    
    # Add enhanced event context
    root.event_context = {
      "ship_id": root.ship_id,
      "device_type": root.device_type,
      "device_id": if root.device_id != null { root.device_id } else { "unknown" },
      "hostname": if this.host != null { this.host } else { "unknown" },
      "source": if this.event_source != null { this.event_source } else { "unknown" }
    }