[api]
enabled = true
address = "0.0.0.0:8686"

[sources.host_metrics]
type = "host_metrics"
scrape_interval_secs = 10

[sources.syslog]
type = "syslog"
address = "0.0.0.0:1514"
mode = "tcp"

[sources.file_logs]
type = "file"
include = ["/var/log/sample/*.log"]
read_from = "beginning"

[transforms.metrics_for_logs]
type = "metric_to_log"
inputs = ["host_metrics"]

[transforms.format_for_clickhouse]
type = "remap"
inputs = ["metrics_for_logs"]
source = '''
.level = "INFO"
.source = "host_metrics"
.message = "Metric: " + string!(.name) + " = " + string!(.counter.value)
.service = "metrics-collector" 
.raw_log = encode_json(.)
.labels = {}
.name = ""
.namespace = ""
.tags = {}
.kind = ""
.counter_value = null
.gauge_value = null
'''

[transforms.syslog_for_logs]
type = "remap"  
inputs = ["syslog"]
source = '''
.timestamp = .timestamp
.level = "INFO"
.message = .message
.source = "syslog"
.host = if exists(.hostname) { .hostname } else { "unknown" }
.service = if exists(.appname) { .appname } else { "system" }
.raw_log = encode_json(.)
.labels = {}
.name = ""
.namespace = ""
.tags = {}
.kind = ""
.counter_value = null
.gauge_value = null
'''

[transforms.file_logs_processed]
type = "remap"
inputs = ["file_logs"]
source = '''
.timestamp = .timestamp
.level = .level
.message = .message
.source = "file"
.host = .host
.service = .service
.raw_log = encode_json(.)
.labels = if exists(.labels) { .labels } else { {} }
.name = ""
.namespace = ""
.tags = {}
.kind = ""
.counter_value = null
.gauge_value = null
'''

[sinks.clickhouse]
type = "clickhouse"
inputs = ["format_for_clickhouse", "syslog_for_logs", "file_logs_processed"]
endpoint = "http://clickhouse:8123"
table = "raw"
database = "logs"
compression = "gzip"
skip_unknown_fields = true
batch.max_events = 100
batch.timeout_secs = 5
healthcheck.enabled = true
request.timeout_secs = 30
request.retry_attempts = 3
request.retry_max_duration_secs = 10

# Debug sink to see ONLY transformed data
[sinks.transform_debug]
type = "console"
inputs = ["format_for_clickhouse"]
target = "stdout"
encoding.codec = "json"

# DISABLED - Additional debug sink for raw metrics to compare
#[sinks.raw_metrics_debug]
#type = "console"
#inputs = ["host_metrics"]
#target = "stdout"  
#encoding.codec = "json"

